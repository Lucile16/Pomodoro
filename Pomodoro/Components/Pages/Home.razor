@page "/"
@using System.Text.Json
@using System.Timers
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

<PageTitle>Pomodoro Timer</PageTitle>

<h1>
    Pomodoro Timer
    @if (SessionStarted)
    {
        <text>(@(IsWorking ? "Work Time" : "Break Time"))</text>
    }
</h1>

<div>
    <label for="workTimeSelect">Work Time:</label>
    <select id="workTimeSelect" @onchange="DefineWorkAndBreakPeriods">
        <option value="25">25 minutes</option>
        <option value="45">45 minutes</option>
    </select>
</div>

<div>
    <p>Break Time: @BreakTime minutes</p>
    <p role="status">Time Remaining: @DisplayTime</p>
</div>

<button class="btn btn-primary" @onclick="StartTimer" disabled="@IsRunning">Start</button>
<button class="btn btn-primary" @onclick="PauseTimer" disabled="@(!IsRunning)">Pause</button>
<button class="btn btn-primary" @onclick="ResetTimer">Reset</button>
<button class="btn btn-primary" @onclick="ExportSessions">Export Sessions</button>

<div class="pt-4">
    <h2>Sessions</h2>
    <ul>
        @foreach (var session in Sessions)
        {
            <li>@session</li>
        }
    </ul>
</div>

@code {
    public int WorkTime { get; set; } = 25;
    public int BreakTime { get; set; } = 5;
    public int Minutes { get; set; } = 25;
    public int Seconds { get; set; }
    public bool IsRunning { get; set; }
    public bool IsWorking { get; set; } = true;
    public Timer? Timer { get; set; }
    public List<string> Sessions { get; set; } = [];
    public bool SessionStarted { get; set; }

    public string DisplayTime => $"{Minutes:00}:{Seconds:00}";

    protected override async Task OnInitializedAsync()
    {
        Timer = new Timer(1000);
        Timer.Elapsed += TimerElapsed;
        await base.OnInitializedAsync();
    }

    public virtual void InvokeStateHasChanged()
    {
        StateHasChanged();
    }

    public virtual async void InvokeAsyncStateHasChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void StartTimer()
    {
        IsRunning = true;
        SessionStarted = true;
        Timer?.Start();
        InvokeStateHasChanged(); // Trigger UI update

        // Add a new session to the list
        Sessions.Add($"Session started at {DateTime.Now} with work time: {WorkTime} minutes and break time: {BreakTime} minutes");
        SaveSessions();
    }

    public void PauseTimer()
    {
        Timer?.Stop();
        IsRunning = false;
        InvokeStateHasChanged(); // Trigger UI update

        // Update the current session with the stop time
        Sessions.Add($"Session stopped at {DateTime.Now} with {Minutes} minutes and {Seconds} seconds remaining.");
        SaveSessions();
    }

    public void ResetTimer()
    {
        Timer?.Stop();
        IsRunning = false;
        Minutes = WorkTime;
        Seconds = 0;
        Sessions = [];
        SessionStarted = false;
        InvokeStateHasChanged(); // Trigger UI update

        Sessions.Clear();
        SaveSessions();
    }

    public void SaveSessions()
    {
        var json = JsonSerializer.Serialize(Sessions);
        File.WriteAllText("sessions.json", json);
    }

    public void ExportSessions()
    {
        var json = JsonSerializer.Serialize(Sessions);
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads", "sessions.json");
        File.WriteAllText(path, json);
    }

    public void DefineWorkAndBreakPeriods(ChangeEventArgs e)
    {
        WorkTime = WorkTime = int.Parse(e.Value?.ToString() ?? "0");
        Minutes = WorkTime; // Reset the timer
        Seconds = 0;

        BreakTime = WorkTime switch
        {
            // Set breakTime based on workTime
            25 => 5,
            45 => 15,
            _ => BreakTime
        };
    }

    public void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (Seconds == 0)
        {
            if (Minutes == 0)
            {
                Timer?.Stop();
                IsRunning = false;
                DefineWorkAndBreakPeriods(new ChangeEventArgs { Value = WorkTime });

                if (IsWorking)
                {
                    IsWorking = false;
                    Minutes = BreakTime;
                    Seconds = 0;
                    Timer?.Start();
                    InvokeAsyncStateHasChanged(); // Ensure UI update on UI thread
                }
                else
                {
                    IsWorking = true;
                    Minutes = WorkTime;
                    Seconds = 0;
                    Timer?.Start();
                    InvokeAsyncStateHasChanged(); // Ensure UI update on UI thread
                }

                Seconds = 0;
                InvokeAsyncStateHasChanged(); // Ensure UI update on UI thread
                return;
            }

            Minutes--;
            Seconds = 59;
        }
        else
        {
            Seconds--;
        }

        InvokeAsyncStateHasChanged(); // Ensure UI update on UI thread
    }

}